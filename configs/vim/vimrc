" vimRc file by Robert Munnoch

set nocompatible              " required
filetype off                  " required

" Set the leader key to its default
" leader is the default backslash
" let mapleader="\\"
let mapleader="\<Space>"

exec "source " . expand('<sfile>:p:h') . "/config_editor.vim"
exec "source " . expand('<sfile>:p:h') . "/install_plugin.vim"

call plug#begin('~/.vim/plugged')

" Better and more varied styles
Plug 'flazz/vim-colorschemes'

" Git plugin to make git rather nice in vim
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/seoul256.vim'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

" File buffer searching using fuzzy search
Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" Nice file browser
" Example help run :help NERDTree
" open the menu while in buffer hit 'm'
Plug 'scrooloose/nerdtree'

" a nice commenter system
" Allows <leader>cc to comment or <leader>cu to uncomment
Plug 'scrooloose/nerdcommenter'

" nicer base line
Plug 'itchyny/lightline.vim'

" Python code folding
Plug 'tmhedberg/SimpylFold'

" use C-n to select and edit duplicates
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-surround'

" " vim syntax highighting of vue
" Plug 'posva/vim-vue'

" " Vim syntax plugin
" " Plug 'hiphish/jinja.vim'
" Plug 'mitsuhiko/vim-jinja'

" " Python helpers and info
Plug 'davidhalter/jedi-vim'

" " vim-syntastic/syntastic.git
" Plug 'vim-syntastic/syntastic'
" " Toml help for toml for syntasic
" Plug 'cespare/vim-toml'
" " Yaml helper for yaml for syntasic
" Plug 'stephpy/vim-yaml'
" " Rust helpers with syntastic
" Plug 'rust-lang/rust.vim'

" " Code completion
" Plug 'Valloric/YouCompleteMe'

" " Semantic language support
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"
" " Muliline editing
" https://github.com/terryma/vim-multiple-cursors
"    start: <C-n> start multicursor and add a virtual cursor + selection on the match
"        next: <C-n> add a new virtual cursor + selection on the next match
"        skip: <C-x> skip the next match
"        prev: <C-p> remove current virtual cursor + selection and go back on previous match
"    select all: <A-n> start multicursor and directly select all matches
Plug 'terryma/vim-multiple-cursors'

call plug#end()

" All of your Plugins must be added before the following line
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""
"
" turn off search highlight with <leader-<space>hl to makit specific to but there
nnoremap <leader><space>hl :nohlsearch<CR>

exec "source " . expand('<sfile>:p:h') . "/nvim_terminal.vim"

function! ClearAllRegisters()
    let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    for r in regs
      call setreg(r, [])
    endfor
    " :let @a = ''
endfunction

" A cursor improvemnt from https://github.com/jonhoo/configs
if has('nvim')
    set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
    set inccommand=nosplit
    noremap <C-q> :confirm qall<CR>
end
"
" Invoke Ctrl-p with c-p
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" fzf
exec "source " . expand('<sfile>:p:h') . "/plugin_config_fzf.vim"

" NERD Tree setup
exec "source " . expand('<sfile>:p:h') . "/plugin_config_nerdtree.vim"

" Lightline
exec "source " . expand('<sfile>:p:h') . "/plugin_config_lightline.vim"

set laststatus=2

" NerdCommenter
exec "source " . expand('<sfile>:p:h') . "/plugin_config_nerdcommenter.vim"

" GitFugitive
" nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
if has("autocmd")
  autocmd BufReadPost fugitive://* nnoremap <leader>gp :Git push<CR>
  autocmd filetype fugitive nnoremap <leader>gp :Git push<CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete
else
  nnoremap <leader>gp :Git push<CR>
endif

" Rust Lang
let g:rustfmt_autosave = 1
" racer + rust
" https://github.com/rust-lang/rust.vim/issues/192
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0
let g:rust_clip_command = 'xclip -selection clipboard'
let $RUST_SRC_PATH = systemlist("rustc --print sysroot")[0] . "/lib/rustlib/src/rust/src"


" " vim-syntastic/syntastic.git
" exec "source " . expand('<sfile>:p:h') . "/plugin_config_syntastic.vim"

" " COC completion
" exec "source " . expand('<sfile>:p:h') . "/plugin_config_coc.vim"

""""""""""""""""""""""""""""""""""""""""""""""""
" Color Schemes
""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme molokai
" exec "source " . expand('<sfile>:p:h') . "/colors/dim.vim"

highlight MatchParen cterm=bold ctermbg=none ctermfg=red
highlight Visual ctermbg=gray ctermfg=black

""""""""""""""""""""""""""""""""""""""""""""""""
" Refresh Syntax highlighting
""""""""""""""""""""""""""""""""""""""""""""""""
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""

" Jump to start and end of line using the home row keys
map H ^
map L $

" Neat X clipboard integration
" ,p will paste clipboard into buffer
" ,c will copy entire buffer into clipboard
noremap <leader>p :read !xsel --clipboard --output<cr>
noremap <leader>c :w !xsel -ib<cr><cr>

" To open a new empty buffer
" " This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
"
" " Move to the next buffer
nmap <leader>bl :bnext<CR>
"
" " Move to the previous buffer
nmap <leader>bh :bprevious<CR>
"
" " Close the current buffer and move to the previous one
" " This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bq! :bp <BAR> bd! #<CR>

" Add a mapping since :b doesn't work for this
" nmap <leader>bs :sb<Space>
" " Show all open buffers and their status
nmap <leader>bls :ls<CR>

nmap <leader>c :close<CR>

nmap <leader>fw :write<CR>
nmap <leader>fq :wq<CR>
nmap <leader>fu :update<CR>
nmap <leader>fr :e %<CR>

" REserved for me
nmap <leader>rq :qa!<CR>

" Turning on and off relative numbers
nmap <leader>orn :set relativenumber<CR>
nmap <leader>onrn :set norelativenumber<CR>

" Turning on and off wrapping
nmap <leader>ow :set wrap<CR>
nmap <leader>onw :set nowrap<CR>

" tab size
nmap <leader>8 :setlocal expandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>
nmap <leader>4 :setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap <leader>2 :setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Permanent undo
set undodir=~/.vimdid
set undofile

" https://www.rockyourcode.com/vim-close-all-other-buffers/
command! Bd :up | %bd | e#
" nnoremap <leader>bd :<c-u>up <bar> %bd <bar> e#<cr>

""""""""""""""""""""""""""""""""""""""""""""""""
" Tab shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"
" " Move to the next tab
map <leader>tl :tabnext<CR>
"
" " Move to the previous tab
map <leader>th :tabprevious<CR>

" " Open a new tab for current file
map <leader>to :tabnew  %<CR>

" " Clost current tab
map <leader>tq :tabclose<CR>
map <leader>tq! :tabclose!<CR>

" " List current labs
map <leader>tls :tabs<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Windows shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <leader>rj <C-W><C-J>
nnoremap <leader>rk <C-W><C-K>
nnoremap <leader>rl <C-W><C-L>
nnoremap <leader>rh <C-W><C-H>

" Disable orignal arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

""""""""""""""""""""""""""""""""""""""""""""""""
" General Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" Move the to window with the buffer rather than swap out the
" window
set switchbuf+=useopen

" Mouse
set mouse=a

" Automatically update a file if it is changed externally
set autoread

" Hidden allow buffers to be hidden and windows to be reused
set hidden

" Better command-line completion
set wildmenu
 
" Show partial commands in the last line of the screen
set showcmd

set ruler

" Simple way of quiting insert mode
inoremap jj <Esc>

" set tabstop=4
" set shiftwidth=4
set expandtab

if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " Use actual tab chars in Makefiles.

    autocmd Bufread,BufNewFile *.j2 set filetype=jinja
    autocmd Bufread,BufNewFile *.html.j2 set filetype=htmljinja
    autocmd Bufread,BufNewFile *.nvim set filetype=vim
    autocmd Bufread,BufNewFile *.yaml set filetype=yaml
    autocmd Bufread,BufNewFile *.yml set filetype=yaml
    autocmd FileType python set tabstop=4 shiftwidth=4 softtabstop=4
    autocmd FileType javascript,htmljinja,jinja set tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType rust set tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType yaml set tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType vim set tabstop=2 shiftwidth=2 softtabstop=2
endif

" Height of the command bar
set cmdheight=1

set hlsearch	    " highlight search matches
set incsearch	    " search while characters are entered

" search is case-insensitive by default
set ignorecase

" Show linenumbers
set number

" Line wrap (number of cols)
set wrap	    " wrap lines only visually
set linebreak	    " wrap only at valid characters

set textwidth=0	    " prevent vim from inserting linebreaks
set wrapmargin=0    "   in newly entered text

" Disable stupid backup and swap files - they trigger to many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" show matching braces
set showmatch

set foldmethod=indent

set splitright
set splitbelow

set visualbell

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Set the vertical column guide
set colorcolumn=80
" Set guides at 80 then 120 then every 5 characters
let &colorcolumn="80,".join(range(120,999, 5),",")

" Setup soft linebreak will not list the line number and should not change the
" text but keep the test on screen
set wrap linebreak nolist

" =======================================================================
" URL extension
" ========================================================================
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map <leader>u :call HandleURL()<cr>

exec "source " . expand('<sfile>:p:h') . "/python_config.vim"

