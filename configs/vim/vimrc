" vimRc file by Robert Munnoch

set nocompatible              " required
filetype off                  " required

" Set the leader key to its default
" leader is the default backslash
" let mapleader="\\"
let mapleader="\<Space>"

exec "source " . expand('<sfile>:p:h') . "/config_editor.vim"

" Get vim-plug package manager on boot
if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
else
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

call plug#begin('~/.vim/plugged')

" Better and more varied styles
Plug 'flazz/vim-colorschemes'

" Git plugin to make git rather nice in vim
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/seoul256.vim'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

" File buffer searching using fuzzy search
Plug 'airblade/vim-rooter'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" Nice file browser
" Example help run :help NERDTree
" open the menu while in buffer hit 'm'
Plug 'scrooloose/nerdtree'

" a nice commenter system
" Allows <leader>cc to comment or <leader>cu to uncomment
Plug 'scrooloose/nerdcommenter'

" nicer base line
Plug 'itchyny/lightline.vim'

" Python code folding
Plug 'tmhedberg/SimpylFold'

" use C-n to select and edit duplicates
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-surround'

" vim syntax highighting of vue
Plug 'posva/vim-vue'

" Vim syntax plugin
" Plug 'hiphish/jinja.vim'
Plug 'mitsuhiko/vim-jinja'

" Python helpers and info
Plug 'davidhalter/jedi-vim'

" vim-syntastic/syntastic.git
Plug 'vim-syntastic/syntastic'
" Toml help for toml for syntasic
Plug 'cespare/vim-toml'
" Yaml helper for yaml for syntasic
Plug 'stephpy/vim-yaml'
" Rust helpers with syntastic
Plug 'rust-lang/rust.vim'

" " Code completion
" Plug 'Valloric/YouCompleteMe'

" Semantic language support
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"
" " Muliline editing
" https://github.com/terryma/vim-multiple-cursors
"    start: <C-n> start multicursor and add a virtual cursor + selection on the match
"        next: <C-n> add a new virtual cursor + selection on the next match
"        skip: <C-x> skip the next match
"        prev: <C-p> remove current virtual cursor + selection and go back on previous match
"    select all: <A-n> start multicursor and directly select all matches
Plug 'terryma/vim-multiple-cursors'

call plug#end()

" All of your Plugins must be added before the following line
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""
"
" turn off search highlight with <leader-<space>hl to makit specific to but there
nnoremap <leader><space>hl :nohlsearch<CR>

" Neovim terminal remap
if has("nvim")
    " got normal with Ctrl+[
    tnoremap <C-[> <C-\><C-n>
    " turn terminal to normal mode with escape
    tnoremap <Esc> <C-\><C-n>

    " Leave buffer in normal mode and move to the direction given
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l

    tnoremap <C-v> <C-\><C-n>"0pi
    " Move to the terminal on the right side move to the last cmd and run then
    " move back
    nmap <leader>tr :w<CR><C-w>li<UP><CR><C-\><C-n><C-w>h
    nmap <leader>tpae :w<CR><C-w>lisource pyvenv/bin/activate<CR><C-\><C-n><C-w>h
    nmap <leader>tpde :w<CR><C-w>lideactivate<CR><C-\><C-n><C-w>h

    " start terminal in insert mode
    au BufEnter * if &buftype == 'terminal' | :startinsert | endif
    " open terminal on ctrl+n
    function! OpenTerminal()
            vsplit term://bash
            " resize 20
            vertical resize 80
    endfunction
    nnoremap <leader>ts :call OpenTerminal()<CR>
    nnoremap <leader>termss :vsplit <BAR> terminal<CR>

endif

function! ClearAllRegisters()
    let regs=split('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-"', '\zs')
    for r in regs
      call setreg(r, [])
    endfor
    " :let @a = ''
endfunction

" A cursor improvemnt from https://github.com/jonhoo/configs
if has('nvim')
    set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
    set inccommand=nosplit
    noremap <C-q> :confirm qall<CR>
end
"
" Invoke Ctrl-p with c-p
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" fzf
let g:fzf_command_prefix = 'Fzf'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

map <leader>f :FzfGitFiles<CR>
map <leader>F :FzfFiles<CR>
map <leader>b<Space> :FzfBuffers<CR>

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" NERD Tree setup
nmap <leader>n :NERDTreeToggle<CR>
autocmd vimenter * NERDTree
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeShowHidden = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" Lightline
let g:lightline = {
\  'active': {
\    'left': [
\      ['mode', 'paste' ],
\      ['gitbranch', 'readonly', 'filename', 'modified']
\    ],
\    'right': [
\      ['lineinfo'],
\      ['percent'],
\      ['fileformat', 'fileencoding', 'filetype']
\    ]
\  },
\  'inactive': {
\    'left': [
\       [ 'filename', 'fullfilename' ]
\    ],
\    'right': [
\       [ 'lineinfo' ],
\       [ 'percent' ]
\    ]
\  },
\  'component': {
\    'fullfilename': '@%F'
\  },
\  'component_function': {
\    'gitbranch': 'fugitive#head'
\  },
\}

set laststatus=2

" NerdCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" GitFugitive
" nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>

" Rust Lang
let g:rustfmt_autosave = 1
" racer + rust
" https://github.com/rust-lang/rust.vim/issues/192
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0
let g:rust_clip_command = 'xclip -selection clipboard'
let $RUST_SRC_PATH = systemlist("rustc --print sysroot")[0] . "/lib/rustlib/src/rust/src"


" vim-syntastic/syntastic.git
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pylint']

" COC completion
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
        
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>

" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>

" Implement methods for trait
nnoremap <silent> <space>i  :call CocActionAsync('codeAction', '', 'Implement missing members')<cr>

" Show actions available at this location
nnoremap <silent> <space>a  :CocAction<cr>

""""""""""""""""""""""""""""""""""""""""""""""""
" Color Schemes
""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme molokai
" exec "source " . expand('<sfile>:p:h') . "/colors/dim.vim"

highlight MatchParen cterm=bold ctermbg=none ctermfg=red
highlight Visual ctermbg=gray ctermfg=black

""""""""""""""""""""""""""""""""""""""""""""""""
" Refresh Syntax highlighting
""""""""""""""""""""""""""""""""""""""""""""""""
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""

" Jump to start and end of line using the home row keys
map H ^
map L $

" Neat X clipboard integration
" ,p will paste clipboard into buffer
" ,c will copy entire buffer into clipboard
noremap <leader>p :read !xsel --clipboard --output<cr>
noremap <leader>c :w !xsel -ib<cr><cr>

" To open a new empty buffer
" " This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
"
" " Move to the next buffer
nmap <leader>bl :bnext<CR>
"
" " Move to the previous buffer
nmap <leader>bh :bprevious<CR>
"
" " Close the current buffer and move to the previous one
" " This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bq! :bp <BAR> bd! #<CR>

" Add a mapping since :b doesn't work for this
" nmap <leader>bs :sb<Space>
" " Show all open buffers and their status
nmap <leader>bls :ls<CR>

nmap <leader>c :close<CR>

nmap <leader>fw :write<CR>
nmap <leader>fu :update<CR>


" Permanent undo
set undodir=~/.vimdid
set undofile

""""""""""""""""""""""""""""""""""""""""""""""""
" Tab shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"
" " Move to the next tab
map <leader>tl :tabnext<CR>
"
" " Move to the previous tab
map <leader>th :tabprevious<CR>

" " Open a new tab for current file
map <leader>to :tabnew  %<CR>

" " Clost current tab
map <leader>tq :tabclose<CR>
map <leader>tq! :tabclose!<CR>

" " List current labs
map <leader>tls :tabs<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Windows shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Disable orignal arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>

inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

""""""""""""""""""""""""""""""""""""""""""""""""
" General Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" Move the to window with the buffer rather than swap out the
" window
set switchbuf+=useopen

" Mouse
set mouse=a

" Automatically update a file if it is changed externally
set autoread

" Hidden allow buffers to be hidden and windows to be reused
set hidden

" Better command-line completion
set wildmenu
 
" Show partial commands in the last line of the screen
set showcmd

set ruler

" Simple way of quiting insert mode
inoremap jj <Esc>

" set tabstop=4
" set shiftwidth=4
set expandtab

if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " Use actual tab chars in Makefiles.

    autocmd Bufread,BufNewFile *.j2 set filetype=jinja
    autocmd Bufread,BufNewFile *.html.j2 set filetype=htmljinja
    autocmd FileType python set tabstop=4 shiftwidth=4 softtabstop=4
    autocmd FileType javascript,htmljinja,jinja set tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType rust set tabstop=2 shiftwidth=2 softtabstop=2
endif

" tab size
nmap <leader>8 :setlocal expandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>
nmap <leader>4 :setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap <leader>2 :setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Height of the command bar
set cmdheight=1

set hlsearch	    " highlight search matches
set incsearch	    " search while characters are entered

" search is case-insensitive by default
set ignorecase

" Show linenumbers
set number

" Turning on and off relative numbers
nmap <leader>orn :set relativenumber<CR>
nmap <leader>onrn :set norelativenumber<CR>

" Line wrap (number of cols)
set wrap	    " wrap lines only visually
set linebreak	    " wrap only at valid characters

" Turning on and off wrapping
nmap <leader>ow :set wrap<CR>
nmap <leader>onw :set nowrap<CR>

set textwidth=0	    " prevent vim from inserting linebreaks
set wrapmargin=0    "   in newly entered text

" Disable stupid backup and swap files - they trigger to many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" show matching braces
set showmatch

set foldmethod=indent

set splitright
set splitbelow

set visualbell

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Set the vertical column guide
set colorcolumn=80
" Set guides at 80 then 120 then every 5 characters
let &colorcolumn="80,".join(range(120,999, 5),",")

" Setup soft linebreak will not list the line number and should not change the
" text but keep the test on screen
set wrap linebreak nolist

" =======================================================================
" URL extension
" ========================================================================
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map <leader>u :call HandleURL()<cr>

exec "source " . expand('<sfile>:p:h') . "/python_config.vim"

