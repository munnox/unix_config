- name: Create VM on KVM hypervisior
  # hosts: "{{ playbook_groups | default('kvm_hosts') }},!disabled"
  hosts: "desk-rob"
  vars:
    virt_uri: qemu:///system
    ssh_pub_key: "{{ lookup('ansible.builtin.file', '~/.ssh/id_ed25519.pub') }}"
    image_dir: /var/lib/libvirt/images
    download_dir: "{{ ansible_user_dir }}"
    # image_name: LoadMaster-VLM-7.2.57.0.21570.RELEASE-Linux-KVM-XEN.disk
    # image_name: LoadMaster-VLM-7.2.57.0.21570.RELEASE-Linux-KVM-XEN-FREE.disk
    # vm.name: freeproxy1

    # vm_guests:
    #   - name: testing
    #     state: present
    #     domain: example.com
    #     disk_type_ext: qcow2
    #     cpus: 2
    #     memory_gib: 2
    #     storage_size: 20G
    #     network_connection: bridge=bridge_default
    #     restart_needed: false
    #     # snapshot_backup_name: "test1"
    #     snapshot_backup_name: false
    #     # snapshot_restore_name: "test1"
    #     snapshot_restore_name: false
    #     image_name: jammy-server-cloudimg-amd64.img
    #     ssh_pub_key: "{{ ssh_pub_key }}"
    #     user: ubuntu
    #     addresses: 192.168.0.2/24

    #   - name: rocky
    #     state: present
    #     domain: example.com
    #     disk_type_ext: qcow2
    #     cpus: 2
    #     memory_gib: 2
    #     storage_size: 20G
    #     network_connection: bridge=bridge_default
    #     restart_needed: false
    #     # snapshot_backup_name: "test1"
    #     snapshot_backup_name: false
    #     # snapshot_restore_name: "test1"
    #     snapshot_restore_name: false
    #     image_name: Rocky-9-GenericCloud-9.0-20220830.0.x86_64.qcow2
    #     ssh_pub_key: "{{ ssh_pub_key }}"
    #     user: rocky
    #     addresses: 192.168.0.3/24
    machines: "{{ vm_guests }}"

  tasks:

    - name: Define Machine
      ansible.builtin.set_fact: # noqa jinja[spacing]
        machine_definitions: |
          {{ machines | munnox.bootstrap.machine_definition(virt_uri, image_dir, download_dir) }}
      # test
          # {% for vm in machines %}
          # {{ vm | to_nice_yaml }}
          # {% endfor %}
    # test
          # image_path: "{{ download_dir }}/{{ vm.image_name }}"
          # main_disk_path:  "{{ (image_dir, vm.name) | path_join }}.{{ vm.disk_type_ext }}"
          # seed_path: "{{ image_dir }}/{{ vm.name }}-seed.img"
          # cloud_config_path:  "{{download_dir }}/{{ vm.name }}_cloud_init.cfg"
          # network_config_path: "{{ download_dir }}/{{ vm.name }}_snetwork_config_static.cfg"
          # virsh_cmd: |
          #   virt-install --connect {{ virt_uri }} --name {{ vm.name }} \
          #     --virt-type kvm --memory {{ new_memory_mib }} --vcpus 2 \
          #     --boot hd,menu=on \
          #     --disk path={{ seed_path }},device=cdrom \
          #     --disk path={{ main_disk_path }},device=disk \
          #     --graphics vnc \
          #     --os-type Linux --os-variant ubuntu20.04 \
          #     --network {{ vm.network_connection }} \
          #     --console pty,target_type=serial \
          #     --wait 0
          # virsh_cmd_default: |
          #   virt-install --connect {{ virt_uri }} --name {{ vm.name }} \
          #     --virt-type kvm --memory {{ new_memory_mib }} --vcpus 2 \
          #     --boot hd,menu=on \
          #     --disk path={{ seed_path }},device=cdrom \
          #     --disk path={{ main_disk_path }},device=disk \
          #     --graphics vnc \
          #     --os-type Linux --os-variant ubuntu20.04 \
          #     --network network:default \
          #     --console pty,target_type=serial

    - name: Show VM Build setup
      ansible.builtin.debug:
        msg: |
          {{ machine_definitions | to_nice_yaml }}

          {% for vm in machine_definitions %}
          CMD for {{ vm.vm.name }}:
          {{ vm.virsh_cmd }}
          {% endfor %}

    # - name: show cmd
    #   debug:
    #     msg: |
    #       {{ (machine_definitions.results.0.ansible_facts.vm_build | from_yaml) }}
    #       {{ (vm_build | from_yaml) | to_nice_yaml }}

    # - name: Ensure libvirt
    #   pip:
    #     name: libvirt-python
    # - name:
    #   block:
    #     tasks:
    #       - name: test machine
    #         shell:
    #           cmd:
    # - name: Set Stop and restart needed?
    #   set_facts:
    #     restart_needed: snapshot_backup_name and snapshot_restore_name

    - name: Download Ubuntu 22.04 cloud image with check (sha256)
      # become: true
      # https://cloud-images.ubuntu.com/jammy/
      ansible.builtin.get_url:
        url: http://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
        dest: "{{ (download_dir, 'jammy-server-cloudimg-amd64.img') | path_join }}"
        checksum: "sha256:fe35607e272c86fa96b33f5d441885a5c5d977b81a391ad3391420ea477450a9"
        # owner: "{{ ansible_user }}"
        # group: "{{ ansible_user }}"
        mode: 0444
      register: ubuntucloud

    - name: Download Rocky 9 cloud image with check (sha256)
      # become: true
      # https://rockylinux.org/alternative-images
      ansible.builtin.get_url:
        url: https://dl.rockylinux.org/pub/rocky/9/images/x86_64/Rocky-9-GenericCloud-9.0-20220830.0.x86_64.qcow2
        dest: "{{ (download_dir, 'Rocky-9-GenericCloud-9.0-20220830.0.x86_64.qcow2') | path_join }}"
        checksum: "sha256:f02570e0ad3653df7f56baa8157739dbe92a003234acd5824dcf94d24694e20b"
        # owner: "{{ ansible_user }}"
        # group: "{{ ansible_user }}"
        mode: 0444
      register: rockycloud

    - name: Ensure cloud utils
      become: true
      ansible.builtin.apt:
        name: cloud-image-utils
        state: present

    - name: Print VM details
      ansible.builtin.debug: # noqa jinja[spacing]
        msg: |
          {{ vm | to_yaml }}
          {{ vm.image_path}}
          {{ vm.main_disk_path }}
          {{ vm.seed_path }}
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"

  #     - name: Remove image {{ ssh_pub_key }}
  #       become: yes
  #       ansible.builtin.file:
  #         path: "{{ item }}"
  #         state: absent
  #       loop:
  #         - "{{ main_disk_path }}"
  #         - "{{ seed_path }}"

    - name: Create image sized
      become: true
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Working on {{ vm.vm.name }} image sized at {{ vm.vm.storage_size }}"
        loop_var: "vm"
      ansible.builtin.shell: |
        qemu-img create -b  "{{ vm.image_path }}" -f qcow2 -F qcow2  "{{ vm.main_disk_path }}" {{ vm.vm.storage_size }}
      args:
        creates: "{{ vm.main_disk_path }}"

      # - name: Copy image
      #   become: yes
      #   ansible.builtin.copy:
      #     remote_src: yes
      #     src: "{{ download_dir }}/{{ image_name }}"
      #     dest: "{{ main_disk_path }}"

    - name: Create cloud.cfg
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      ansible.builtin.copy:
        dest: "{{ vm.cloud_config_path }}"
        mode: 0444
        content: |
          #cloud-config
          hostname: {{ vm.vm.name }}
          fqdn: {{ vm.vm.name }}.{{ vm.vm.domain }}
          manage_etc_hosts: true
          users:
            - name: {{ vm.vm.user }}
              sudo: ALL=(ALL) NOPASSWD:ALL
              groups: users, admin
              home: /home/{{ vm.vm.user }}
              shell: /bin/bash
              lock_passwd: false
              ssh-authorized-keys:
                - {{ vm.vm.ssh_pub_key }}
          # only cert auth via ssh (console access can still login)
          # ssh_pwauth: false
          chpasswd:
            list: |
              {{ vm.vm.user }}:linux
            expire: False
          packages:
            - qemu-guest-agent
          # written to /var/log/cloud-init-output.log
          final_message: "The system is finally up, after $UPTIME seconds"

    - name: Create image network
      # https://linuxcontainers.org/lxd/docs/stable-4.0/cloud-init/
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      ansible.builtin.copy:
        dest: "{{ vm.network_config_path }}"
        mode: 0444
        content: |
          version: 2
          ethernets:
            # Default NIC on Ubuntu
            enp1s0:
              # dhcp4: true
              # default libvirt network
              addresses: [ {{ vm.vm.addresses }} ]
              # gateway4: 192.168.2.1 # Depreciated in favor of the routes below
              routes:
                - to: default
                  via: 192.168.2.1
              nameservers:
                addresses: [ 192.168.2.1,8.8.8.8 ]
                search: [ {{ vm.vm.domain }} ]
            # Default NIC on Rocky
            eth0:
              #dhcp4: true
              # default libvirt network
              addresses: [ {{ vm.vm.addresses }} ]
              gateway4: 192.168.2.1
              nameservers:
                addresses: [ 192.168.2.1,8.8.8.8 ]
                search: [ {{ vm.vm.domain }} ]

    - name: Create seed image
      become: true
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      ansible.builtin.shell: |
        cloud-localds -v --network-config="{{ vm.network_config_path }}" "{{ vm.seed_path }}" "{{ vm.cloud_config_path }}"
      args:
        creates: "{{ vm.seed_path }}"

    - name: Run vm define
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      register: run_cmd
      ansible.builtin.shell: |
        {{ vm.virsh_cmd }}
      failed_when: false
      changed_when: true

    - name: Print run
      ansible.builtin.debug:
        msg: |
          {{ run_cmd | to_nice_yaml }}

    - name: Add ssh config block
      ansible.builtin.blockinfile:
        path: "~/.ssh/config"
        # path: "./config"
        mode: 0600
        block: |
          host {{ vm.vm.name }}
            hostname {{ vm.vm.addresses[:-3] }}
            user {{ vm.vm.user }}
            stricthostkeychecking no
            userknownhostsfile=/dev/null
        marker: "# {mark} ansible managed block for {{ vm.vm.name }}"
        create: true
      delegate_to: localhost
      when: vm.vm.state == "present"
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      no_log: true

    - name: Remove ssh config block
      ansible.builtin.blockinfile:
        path: "~/.ssh/config"
        marker: "# {mark} ansible managed block for {{ vm.vm.name }}"
      when: vm.vm.state == "absent"
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      delegate_to: localhost
      no_log: true

    - name: Wait 10 seconds then check for port 22 to become open for all the servers
      ansible.builtin.wait_for:
        host: "{{ vm.vm.addresses[:-3] }}"
        port: 22
        delay: 5
        sleep: 2
        timeout: 300
      when: vm.vm.state == "present"
      loop: "{{ machine_definitions }}"
      loop_control:
        label: "Work on {{ vm.vm.name }}"
        loop_var: "vm"
      no_log: true

  #     # - name: Define machine command line
  #     #   ansible.builtin.copy:
  #     #     dest: "{{download_dir }}/machine.xml"
  #     #     content: |
  # # testing
  #       # <domain type='kvm'>
  #       #   <name>hvf-demo</name>
  #       #   <!--<uuid>4dea24b3-1d52-d8f3-2516-782e98a23fa0</uuid>-->
  #       #   <memory>2048</memory>
  #       #   <vcpu>2</vcpu>
  #       #   <os>
  #       #     <type arch="x86_64">hvm</type>
  #       #   </os>
  #       #   <features>
  #       #     <acpi/>
  #       #   </features>
  #       #   <clock sync="localtime"/>
  #       #   <devices>
  #       #     <emulator>/usr/local/bin/qemu-system-x86_64</emulator>
  #       #     <controller type='scsi' index='0' model='virtio-scsi'/>
  #       #     <disk type='volume' device='disk'>
  #       #       <driver name='qemu' type='qcow2'/>
  #       #       <source pool='default' volume='myos'/>
  #       #       <target bus='scsi' dev='sda'/>
  #       #     </disk>
  #       #     <interface type='user'>
  #       #       <mac address='24:42:53:21:52:45'/>
  #       #       <model type='virtio'/>
  #       #     </interface>
  #       #     <graphics type='vnc' port='-1'/>
  #       #   </devices>
  #       # </domain>
  #     # - name: define vm
  #     #   community.libvirt.virt:
  #     #     command: define
  #     #     xml: "{{ lookup('template', 'vm_template.xml.j2') }}"
  #     #     # xml:
  #     #     # uri: 'lxc:///'
  #     # - name: start vm
  #     #   community.libvirt.virt:
  #     #     name: "{{ vm.name }}"
  #     #     state: running
  #     #     # uri: 'lxc:///'
