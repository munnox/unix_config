# Install and setup k3s and AWX ubuntu

- name: Update repositories cache and Update all packages to their latest version from the Common Role
  ansible.builtin.include_role:
    name: common
    tasks_from: utility_update_package_manager.yml

- name: install package dependancies
  become: yes
  apt:
    name:
      - git
      - make
      - build-essential
      - curl
      - jq
      # - nginx

- name: Add repo directory
  ansible.builtin.file:
    path: repo
    state: directory

# - name: Add AWX repo
#   tags: s3
#   shell: |
#     cd repo

#     git clone https://github.com/ansible/awx-operator.git
#   args:
#     creates: ~/repo/awx_operator
#   register: add_awx_repo
#   failed_when: add_awx_repo.rc not in [0, 128]

- name: AWX repo get latest stable version
  tags: s3
  shell: |
    RELEASE_TAG=`curl -s https://api.github.com/repos/ansible/awx-operator/releases/latest | grep tag_name | cut -d '"' -f 4`
    echo $RELEASE_TAG
  # args:
  #   creates: ~/repo/awx_operator
  register: version_awx_repo
  changed_when: no

- name: Add AWX Repo
  ansible.builtin.git:
    repo: https://github.com/ansible/awx-operator.git
    dest: "/home/{{ ansible_user }}/repo/awx-operator"
    version: "{{ version_awx_repo.stdout }}"
    force: yes
  # failed_when: false
  register: add_awx_repo


- name: show add step
  debug:
    msg: |
      {{ version_awx_repo }}
      {{ add_awx_repo }}

# - name: Setup permissions for K3S
#   become: yes
#   tags: s4
#   shell: |
#     chmod 644 /etc/rancher/k3s/k3s.yaml
#     echo K3S_KUBECNFIG_MODE=\"644\" >> /etc/systemd/system/k3s.service.env

- name: setup the base operator
  become: yes
  when: awx_state == 'present'
  shell: |
    cd repo/awx-operator

    export NAMESPACE={{ awx_namespace }}
    kubectl create ns ${NAMESPACE}

    kubectl config set-context --current --namespace=$NAMESPACE

- name: Run base operator
  when: awx_state == 'present'
  shell: |
    cd repo/awx-operator
    export NAMESPACE={{ awx_namespace }}
    make deploy

# To solve https://github.com/ansible/awx-operator/issues/1055
- name: Build data directory
  become: yes
  when: awx_state == 'present'
  ansible.builtin.file:
    path: /data/awx/projects
    state: directory
    recurse: yes
    owner: 1000
    group: 1000
    mode: '0755'

- name: Define an awx persistent volume
  copy:
    dest: ~/awx_pv.yml
    content: |
      ---
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: awx-projects-volume
        # namespace: awx
      spec:
        accessModes:
          - ReadWriteOnce
        persistentVolumeReclaimPolicy: Retain
        capacity:
          storage: 5Gi
        storageClassName: awx-projects-volume
        hostPath:
          # path: /u01/data/projects
          path: /data/awx/projects

- name: Define an awx persistent volume claim
  copy:
    dest: ~/awx_pvc.yml
    content: |
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: awx-projects-claim
        #namespace: awx
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: awx-projects-volume
        volumeMode: Filesystem
        resources:
          requests:
            storage: 5Gi

- name: Define an awx deploy file
  copy:
    dest: ~/awx_deploy.yml
    content: |
      ---
      apiVersion: awx.ansible.com/v1beta1
      kind: AWX
      metadata:
        name: awx
      spec:
        service_type: nodeport
        projects_persistence: true
        # projects_storage_access_mode: ReadWriteOnce
        projects_existing_claim: awx-projects-claim
        # https://github.com/ansible/awx-operator#containers-resource-requirements
        # web_extra_volume_mounts: |
        #   - name: static-data
        #     mountPath: /var/lib/projects
        # extra_volumes: |
        #   - name: static-data
        #     persistentVolumeClaim:
        #       claimName: awx-projects-pvc
  # web_resource_requirements:
  #   requests:
  #     cpu: 250m
  #     memory: 1Gi
  #   limits:
  #     cpu: 250m
  #     memory: 1Gi
  # task_resource_requirements:
  #   requests:
  #     cpu: 250m
  #     memory: 1Gi
  #   limits:
  #     cpu: 250m
  #     memory: 1Gi
  # ee_resource_requirements:
  #   requests:
  #     cpu: 250m
  #     memory: 100Mi
  #   limits:
  #     cpu: 250m
  #     memory: 1Gi

- name: Create awx persistent volume
  when: awx_state == 'present'
  shell: |
    kubectl apply -f ~/awx_pv.yml

- name: Create awx persistent volume claim
  when: awx_state == 'present'
  shell: |
    kubectl apply -f ~/awx_pvc.yml

- name: Create AWX
  when: awx_state == 'present'
  # creates: awx_deploy.yml
  shell: |
    kubectl apply -f awx_deploy.yml

- name: Delete AWX
  when: awx_state == 'absent'
  shell: |
    kubectl delete -f awx_deploy.yml

- name: Delete awx persistent volume claim
  when: awx_state == 'absent'
  shell: |
    kubectl delete -f ~/awx_pvc.yml

- name: Delete awx persistent volume
  when: awx_state == 'absent'
  shell: |
    kubectl delete -f ~/awx_pv.yml

- name: Build data directory
  become: yes
  when: awx_state == 'absemt'
  ansible.builtin.file:
    path: /data/awx/projects
    state: absent
# watch kubectl get pods -l "app.kubernetes.io/managed-by=awx-operator"

# kubectl get svc -l "app.kubernetes.io/managed-by=awx-operator"

# - name: Pause for 1 minutes to build app cache
#   when: awx_state == 'present'
#   pause:
#     minutes: 1

- name: Pause play until a URL is reachable from this host
  uri:
    url: "http://{{ ansible_fqdn }}:30080"
    follow_redirects: none
    method: GET
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds

- name: Make dashboard users token
  when: awx_state == 'present'
  shell: |
    kubectl get secret awx-admin-password -o jsonpath="{.data.password}" | base64 --decode > ~/awx_token
  # args:
  #   creates: ~/awx_token

- name: Get the dashboard users token
  when: awx_state == 'present'
  shell: |
    cat ~/awx_token
  changed_when: false
  register: result

- name: Print token
  debug:
    var: result.stdout