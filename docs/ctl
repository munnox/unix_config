#!/bin/sh
# ctl build
# ctl d notes

IMAGE_NAME="ram/tsnew:0.1"
CONTAINER_NAME="notes"
LOCAL_CONTAINER_NAME=${2:-"$CONTAINER_NAME"}
LOCAL_PORT=${3:-"5000"}

WIKINAME=$LOCAL_CONTAINER_NAME
WIKIROOT="$(pwd)/$WIKINAME"
WIKICREDS="$(pwd)/creds.csv"
WIKIPATH=$WIKIROOT/$WIKINAME

echo "Note contiainer name: $WIKINAME"

build () {
    docker build . --no-cache --rm --force-rm --tag $IMAGE_NAME
}

run_as_daemon () {
    # run the image as a deamon with the terminal on
    echo "running as demon $1"
    # init 
    if [ ! -d $WIKIPATH ]; then
        echo "wiki doesn't exist so will be created" 
        docker run --rm \
            --name $1 \
            --volume $WIKIROOT:/opt/wiki \
            --volume $WIKICREDS:/opt/creds.csv \
            $IMAGE_NAME \
            tiddlywiki $WIKINAME --init empty
        sudo mkdir $WIKIPATH/tiddlers/
        cat << EOF | sudo tee $WIKIPATH/tiddlywiki.info
{
    "description": "Basic testing wiki",
    "plugins": [
        "tiddlywiki/internals",
        "tiddlywiki/tiddlyweb",
        "tiddlywiki/filesystem",
        "tiddlywiki/qrcode",
        "tiddlywiki/codemirror",
        "tiddlywiki/codemirror-closebrackets",
        "tiddlywiki/codemirror-closetag",
        "tiddlywiki/codemirror-autocomplete",
        "tiddlywiki/codemirror-search-replace",
        "tiddlywiki/codemirror-fullscreen-editing",
        "tiddlywiki/codemirror-mode-xml",
        "tiddlywiki/codemirror-mode-javascript",
        "tiddlywiki/codemirror-mode-css",
        "tiddlywiki/codemirror-mode-x-tiddlywiki",
        "tiddlywiki/codemirror-mode-markdown",
        "tiddlywiki/codemirror-keymap-sublime-text"
    ],
    "themes": [
        "tiddlywiki/vanilla",
        "tiddlywiki/snowwhite"
    ],
    "build": {
        "index": [
            "--rendertiddler",
            "$:/core/save/all",
            "index.html",
            "text/plain"
        ],
        "empty": [
            "--rendertiddler",
            "$:/core/save/all",
            "empty.html",
            "text/plain",
            "--rendertiddler",
            "$:/core/save/all",
            "empty.hta",
            "text/plain"
        ],
        "externalimages": [
            "--savetiddlers",
            "[is[image]]",
            "images",
            "--setfield",
            "[is[image]]",
            "_canonical_uri",
            "$:/core/templates/canonical-uri-external-image",
            "text/plain",
            "--setfield",
            "[is[image]]",
            "text",
            "",
            "text/plain",
            "--rendertiddler",
            "$:/core/save/all",
            "externalimages.html",
            "text/plain"
        ],
        "static": [
            "--rendertiddler",
            "$:/core/templates/static.template.html",
            "static.html",
            "text/plain",
            "--rendertiddler",
            "$:/core/templates/alltiddlers.template.html",
            "alltiddlers.html",
            "text/plain",
            "--rendertiddlers",
            "[!is[system]]",
            "$:/core/templates/static.tiddler.html",
            "static",
            "text/plain",
            "--rendertiddler",
            "$:/core/templates/static.template.css",
            "static/static.css",
            "text/plain"
        ]
    }
}
EOF
    fi
    # run
    echo "removal of container $1"
    docker rm -f $1
    echo "running new container $1"
    docker run -d \
        --name $1 \
        -p $LOCAL_PORT:5000 \
        -e WIKINAME=$WIKINAME \
        --volume $WIKIROOT:/opt/wiki \
        --volume $WIKICREDS:/opt/wiki/creds.csv \
        $IMAGE_NAME
}

one_shot () {
    echo "running as one shot"
    docker run -it --rm \
      -e WIKINAME=$WIKINAME \
      --volume $WIKIROOT:/opt/wiki \
      --volume $WIKICREDS:/opt/wiki/creds.csv \
      $IMAGE_NAME sh
}

attach () {
    echo "attaching to container $1 bash"
    docker exec -it $1 sh
}

clean () {
    echo "clean the container image and directory"
    docker image rm -f $IMAGE_NAME
    sudo rm -rf $WIKIROOT
}

removal () {
    echo "Remove the container"
    docker rm -f $LOCAL_CONTAINER_NAME
}

echo "command $1"

case $1 in

  build)
    build
    ;;
  d)
    run_as_daemon $LOCAL_CONTAINER_NAME
    ;;
  attach)
    attach $LOCAL_CONTAINER_NAME
    ;;
  a)
    attach $LOCAL_CONTAINER_NAME
    ;;
  os)
    one_shot
    ;;
  ctl)
    one_shot
    ;;
  clean)
    clean $LOCAL_CONTAINER_NAME
    ;;
  rm)
    removal
    ;;
  *)
    echo "please specify cmd options include: (build, d, attach, a, os, ctl, clean, rm)"
    ;;
esac
