" vimRc file by Robert Munnoch

set nocompatible              " required
filetype off                  " required

let mapleader=","       " leader is comma

exec "source " . expand('<sfile>:p:h') . "/config_editor.vim"

" Get vim-plug package manager on boot
if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
else
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/seoul256.vim'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'itchyny/lightline.vim'
Plug 'tmhedberg/SimpylFold'

" use C-n to select and edit duplicates
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-surround'

" vim syntax highighting of vue
Plug 'posva/vim-vue'

" Python helpers and info
" Plug 'davidhalter/jedi-vim'

call plug#end()

" Plugin 'tmhedberg/SimpylFold'
" Plugin 'vim-scripts/indentpython.vim'
" Ctrl-p
" Plugin 'kien/ctrlp.vim'
" You Complete Me 
" Bundle 'Valloric/YouCompleteMe'


" All of your Plugins must be added before the following line
filetype plugin indent on    " required

"""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""
"
" turn off search highlight with ,-<space>
" nnoremap <leader><space> :nohlsearch<CR>

" Neovim terminal remap
if has("nvim")
    tnoremap <C-[> <C-\><C-n>
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    nnoremap <leader>st :vsplit <BAR> terminal<CR>
endif
"
" Invoke Ctrl-p with c-p
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Configuration
""""""""""""""""""""""""""""""""""""""""""""""""
"
" fzf
map <leader>f :Files<CR>

" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" NERD Tree setup
nmap <leader>n :NERDTreeToggle<CR>

" Lightline
let g:lightline = {
  \     'active': {
  \         'left': [['mode', 'paste' ], ['gitbranch', 'readonly', 'filename', 'fullfilename', 'modified']],
  \         'right': [['lineinfo'], ['percent'], ['fileformat', 'fileencoding']]
  \     },
  \     'component': {
  \         'fullfilename': '@%F'
  \     },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ },
  \ }

set laststatus=2

" Color Schemes
colorscheme molokai
" exec "source " . expand('<sfile>:p:h') . "/colors/dim.vim"

highlight MatchParen cterm=bold ctermbg=none ctermfg=red
highlight Visual ctermbg=gray ctermfg=black

" Fugitive
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>

" NerdCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
" To open a new empty buffer
" " This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
"
" " Move to the next buffer
nmap <leader>bl :bnext<CR>
"
" " Move to the previous buffer
nmap <leader>bh :bprevious<CR>
"
" " Close the current buffer and move to the previous one
" " This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bq! :bp <BAR> bd! #<CR>
"
" " Show all open buffers and their status
nmap <leader>bs :ls<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Tab shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"
" " Move to the next tab
map <leader>tl :tabnext<CR>
"
" " Move to the previous tab
map <leader>th :tabprevious<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Windows shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

""""""""""""""""""""""""""""""""""""""""""""""""
" General Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" Mouse
set mouse=a

" Automatically update a file if it is changed externally
set autoread

inoremap jj <Esc>

set tabstop=4
set shiftwidth=4
set expandtab

nmap <leader>t :setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap <leader>m :setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Height of the command bar
set cmdheight=1

set hlsearch	    " highlight search matches
set incsearch	    " search while characters are entered

" search is case-insensitive by default
set ignorecase

" Show linenumbers
set number
" Turning on and off relative numbers
nmap <leader>rn :set relativenumber<CR>
nmap <leader>nrn :set norelativenumber<CR>

" Line wrap (number of cols)
set wrap	    " wrap lines only visually
set linebreak	    " wrap only at valid characters
set textwidth=0	    " prevent vim from inserting linebreaks
set wrapmargin=0    "   in newly entered text

" Disable stupid backup and swap files - they trigger to many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" show matching braces
set showmatch

set foldmethod=indent

set splitright
set splitbelow

" Setup soft linebreak will not list the line number and should not change the
" text but keep the test on screen
set wrap linebreak nolist

" =======================================================================
" URL extension
" ========================================================================
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map <leader>u :call HandleURL()<cr>

exec "source " . expand('<sfile>:p:h') . "/python_config.vim"

