" vimRc file by Robert Munnoch

set nocompatible              " required
filetype off                  " required

let mapleader="\\"       " leader is the default backslash

exec "source " . expand('<sfile>:p:h') . "/config_editor.vim"

" Get vim-plug package manager on boot
if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
else
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

call plug#begin('~/.vim/plugged')

" Better and more varied styles
Plug 'flazz/vim-colorschemes'

" Git plugin to make git rather nice in vim
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Plug 'junegunn/seoul256.vim'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'

" File buffer searching using fuzzy search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" Nice file browser
Plug 'scrooloose/nerdtree'

" a nice commenter system
" Allows <leader?cc to comment or <leader>cu to uncomment
Plug 'scrooloose/nerdcommenter'

" nicer base line
Plug 'itchyny/lightline.vim'

" Python code folding
Plug 'tmhedberg/SimpylFold'

" use C-n to select and edit duplicates
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-surround'

" vim syntax highighting of vue
Plug 'posva/vim-vue'

" Vim syntax plugin
" Plug 'hiphish/jinja.vim'
Plug 'mitsuhiko/vim-jinja'

" Python helpers and info
Plug 'davidhalter/jedi-vim'

" Rust helpers
Plug 'rust-lang/rust.vim'

" " Code completion
" Plug 'Valloric/YouCompleteMe'

call plug#end()

" All of your Plugins must be added before the following line
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""
"
" turn off search highlight with ,-<space>
" nnoremap <leader><space> :nohlsearch<CR>

" Neovim terminal remap
if has("nvim")
    tnoremap <C-[> <C-\><C-n>
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    nnoremap <leader>ts :vsplit <BAR> terminal<CR>
    " Move to the terminal on the right side move to the last cmd and run then
    " move back
    nmap <leader>tr :w<CR><C-w>li<UP><CR><C-\><C-n><C-w>h
    nmap <leader>tpae :w<CR><C-w>lisource pyvenv/bin/activate<CR><C-\><C-n><C-w>h
    nmap <leader>tpde :w<CR><C-w>lideactivate<CR><C-\><C-n><C-w>h

endif
"
" Invoke Ctrl-p with c-p
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'

""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" fzf
let g:fzf_command_prefix = 'Fzf'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

map <leader>f :FzfGitFiles<CR>
map <leader>F :FzfFiles<CR>
map <leader>B :FzfBuffers<CR>

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" let g:ycm_autoclose_preview_window_after_completion=1
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" NERD Tree setup
nmap <leader>n :NERDTreeToggle<CR>

" Lightline
let g:lightline = {
\  'active': {
\    'left': [
\      ['mode', 'paste' ],
\      ['gitbranch', 'readonly', 'filename', 'modified']
\    ],
\    'right': [
\      ['lineinfo'],
\      ['percent'],
\      ['fileformat', 'fileencoding', 'filetype']
\    ]
\  },
\  'inactive': {
\    'left': [
\       [ 'filename', 'fullfilename' ]
\    ],
\    'right': [
\       [ 'lineinfo' ],
\       [ 'percent' ]
\    ]
\  },
\  'component': {
\    'fullfilename': '@%F'
\  },
\  'component_function': {
\    'gitbranch': 'fugitive#head'
\  },
\}

set laststatus=2

" NerdCommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" GitFugitive
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Color Schemes
""""""""""""""""""""""""""""""""""""""""""""""""
colorscheme molokai
" exec "source " . expand('<sfile>:p:h') . "/colors/dim.vim"

highlight MatchParen cterm=bold ctermbg=none ctermfg=red
highlight Visual ctermbg=gray ctermfg=black

""""""""""""""""""""""""""""""""""""""""""""""""
" Refresh Syntax highlighting
""""""""""""""""""""""""""""""""""""""""""""""""
noremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
" To open a new empty buffer
" " This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>
"
" " Move to the next buffer
nmap <leader>bl :bnext<CR>
"
" " Move to the previous buffer
nmap <leader>bh :bprevious<CR>
"
" " Close the current buffer and move to the previous one
" " This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>
nmap <leader>bq! :bp <BAR> bd! #<CR>
"
" " Show all open buffers and their status
nmap <leader>bs :ls<CR>

nmap <leader>c :close<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Tab shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"
" " Move to the next tab
map <leader>tl :tabnext<CR>
"
" " Move to the previous tab
map <leader>th :tabprevious<CR>

""""""""""""""""""""""""""""""""""""""""""""""""
" Windows shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

""""""""""""""""""""""""""""""""""""""""""""""""
" General Configuration
""""""""""""""""""""""""""""""""""""""""""""""""

" Move the to window with the buffer rather than swap out the
" window
set switchbuf+=useopen

" Add a mapping since :b doesn't work for this
nmap <leader>bb :sb<space>
nmap <leader>bls :ls<CR>

" Mouse
set mouse=a

" Automatically update a file if it is changed externally
set autoread

" Hidden allow buffers to be hidden and windows to be reused
set hidden

" Better command-line completion
set wildmenu
 
" Show partial commands in the last line of the screen
set showcmd

set ruler

" Simple way of quiting insert mode
inoremap jj <Esc>

" set tabstop=4
" set shiftwidth=4
set expandtab

if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " Use actual tab chars in Makefiles.

    autocmd Bufread,BufNewFile *.j2 set filetype=jinja
    autocmd Bufread,BufNewFile *.html.j2 set filetype=htmljinja
    autocmd FileType python set tabstop=4 shiftwidth=4 softtabstop=4
    autocmd FileType javascript,htmljinja,jinja set tabstop=2 shiftwidth=2 softtabstop=2
endif

" tab size
nmap <leader>4 :setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
nmap <leader>2 :setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

" Height of the command bar
set cmdheight=1

set hlsearch	    " highlight search matches
set incsearch	    " search while characters are entered

" search is case-insensitive by default
set ignorecase

" Show linenumbers
set number

" Turning on and off relative numbers
nmap <leader>rn :set relativenumber<CR>
nmap <leader>nrn :set norelativenumber<CR>

" Line wrap (number of cols)
set wrap	    " wrap lines only visually
set linebreak	    " wrap only at valid characters
set textwidth=0	    " prevent vim from inserting linebreaks
set wrapmargin=0    "   in newly entered text

" Disable stupid backup and swap files - they trigger to many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" show matching braces
set showmatch

set foldmethod=indent

set splitright
set splitbelow

set visualbell

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Set the vertical column guide
set colorcolumn=80
" Set guides at 80 then 120 then every 5 characters
let &colorcolumn="80,".join(range(120,999, 5),",")

" Setup soft linebreak will not list the line number and should not change the
" text but keep the test on screen
set wrap linebreak nolist

" =======================================================================
" URL extension
" ========================================================================
function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
  echo s:uri
  if s:uri != ""
    silent exec "!open '".s:uri."'"
  else
    echo "No URI found in line."
  endif
endfunction
map <leader>u :call HandleURL()<cr>

exec "source " . expand('<sfile>:p:h') . "/python_config.vim"

